/*
  main.c - An embedded CNC Controller with rs274/ngc (g-code) support
  Part of Grbl

  Copyright (c) 2011-2015 Sungeun K. Jeon
  Copyright (c) 2009-2011 Simen Svale Skogsrud

  Grbl is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  Grbl is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
*/
// Declare system global variable structure
system_t
system t
sys
main
// Initialize system upon power-up.
serial_init
serial init
// Setup serial baud rate and interrupts
settings_init
settings init
// Load Grbl settings from EEPROM
stepper_init
stepper init
// Configure stepper pins and interrupt timers
system_init
system init
// Configure pinout pins and pin-change interrupt
memset
sys
system_t
system t
// Clear all system variables
sys
abort
true
// Set abort to complete initialization
sei
// Enable interrupts
// Check for power-up and set system alarm if homing is enabled to force homing cycle
// by setting Grbl's alarm state. Alarm locks out all g-code commands, including the
// startup scripts, but allows access to settings and internal commands. Only a homing
// cycle '$H' or kill alarm locks '$X' will disable the alarm.
// NOTE: The startup script will run after successful completion of the homing cycle, but
// not after disabling the alarm locks. Prevents motion startup blocks from crashing into
// things uncontrollably. Very bad.
HOMING_INIT_LOCK
homing init lock
bit_istrue
bit istrue
settings
flags
BITFLAG_HOMING_ENABLE
bitflag homing enable
sys
state
STATE_ALARM
state alarm
// Force Grbl into an ALARM state upon a power-cycle or hard reset.
FORCE_INITIALIZATION_ALARM
force initialization alarm
sys
state
STATE_ALARM
state alarm
// Grbl initialization loop upon power-up or a system abort. For the latter, all processes
// will return to this loop to be cleanly re-initialized.
// TODO: Separate configure task that require interrupts to be disabled, especially upon
// a system abort and ensuring any active interrupts are cleanly reset.
// Reset Grbl primary systems.
serial_reset_read_buffer
serial reset read buffer
// Clear serial read buffer
gc_init
gc init
// Set g-code parser to default state
spindle_init
spindle init
coolant_init
coolant init
limits_init
limits init
probe_init
probe init
plan_reset
plan reset
// Clear block buffer and planner variables
st_reset
st reset
// Clear stepper subsystem variables.
// Sync cleared gcode and planner positions to current system position.
plan_sync_position
plan sync position
gc_sync_position
gc sync position
// Reset system variables.
sys
abort
false
sys_rt_exec_state
sys rt exec state
sys_rt_exec_alarm
sys rt exec alarm
sys
suspend
false
sys
soft_limit
soft limit
false
// Start Grbl main loop. Processes program inputs and executes them.
protocol_main_loop
protocol main loop
/* Never reached */
