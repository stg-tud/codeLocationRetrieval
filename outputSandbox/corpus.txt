/****************************************************************************
 * NCSA Mosaic for the X Window System                                      *
 * Software Development Group                                               *
 * National Center for Supercomputing Applications                          *
 * University of Illinois at Urbana-Champaign                               *
 * 605 E. Springfield, Champaign IL 61820                                   *
 * mosaic@ncsa.uiuc.edu                                                     *
 *                                                                          *
 * Copyright (C) 1993, Board of Trustees of the University of Illinois      *
 *                                                                          *
 * NCSA Mosaic software, both binary and source (hereafter, Software) is    *
 * copyrighted by The Board of Trustees of the University of Illinois       *
 * (UI), and ownership remains with the UI.                                 *
 *                                                                          *
 * The UI grants you (hereafter, Licensee) a license to use the Software    *
 * for academic, research and internal business purposes only, without a    *
 * fee.  Licensee may distribute the binary and source code (if released)   *
 * to third parties provided that the copyright notice and this statement   *
 * appears on all copies and that no charge is associated with such         *
 * copies.                                                                  *
 *                                                                          *
 * Licensee may make derivative works.  However, if Licensee distributes    *
 * any derivative work based on or derived from the Software, then          *
 * Licensee will (1) notify NCSA regarding its distribution of the          *
 * derivative work, and (2) clearly notify users that such derivative       *
 * work is a modified version and not the original NCSA Mosaic              *
 * distributed by the UI.                                                   *
 *                                                                          *
 * Any Licensee wishing to make commercial use of the Software should       *
 * contact the UI, c/o NCSA, to negotiate an appropriate license for such   *
 * commercial use.  Commercial use includes (1) integration of all or       *
 * part of the source code into a product for sale or license by or on      *
 * behalf of Licensee to third parties, or (2) distribution of the binary   *
 * code or source code to third parties that need it to utilize a           *
 * commercial product sold or licensed by or on behalf of Licensee.         *
 *                                                                          *
 * UI MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THIS SOFTWARE FOR   *
 * ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED          *
 * WARRANTY.  THE UI SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY THE    *
 * USERS OF THIS SOFTWARE.                                                  *
 *                                                                          *
 * By using or copying this Software, Licensee agrees to abide by the       *
 * copyright law and all other applicable laws of the U.S. including, but   *
 * not limited to, export control laws, and the terms of this license.      *
 * UI shall have the right to terminate this license immediately by         *
 * written notice upon Licensee's breach of, or non-compliance with, any    *
 * of its terms.  Licensee may be held legally responsible for any          *
 * copyright infringement that is caused or encouraged by Licensee's        *
 * failure to abide by the terms of this license.                           *
 *                                                                          *
 * Comments and questions are welcome and can be sent to                    *
 * mosaic-x@ncsa.uiuc.edu.                                                  *
 ****************************************************************************/
Proxy
proxy
noproxy_list
noproxy list
NULL
proxy_list
proxy list
ReadProxies
read proxies
Widget
widget
mo_fill_toolbar
mo fill toolbar
mo_window
mo window
win
top
w
h
__SRC__
  src  
Pixmap
pixmap
tmp_pix
tmp pix
/*SWP -- 9/7/95*/
pre_title
pre title
cursorAnimCnt
cursor anim cnt
makeBusy
make busy
/*SWP -- colormap 3/19/96*/
installed_colormap
installed colormap
Colormap
colormap
installed_cmap
installed cmap
/* SWP -- Spoof Agent stuff */
numAgents
num agents
selectedAgent
selected agent
agent
/* PLB */
newsShowAllGroups
news show all groups
newsShowAllArticles
news show all articles
newsShowReadGroups
news show read groups
newsNoThreadJumping
news no thread jumping
ConfigView
config view
kill_splash
kill splash
splash_cc
splash cc
/* 1 if we need to free colors, 0 if already popped down */
XtIntervalId
xt interval id
splashTimer
splash timer
splash
slab_words
slab words
sarg
scount
smalllogo
stexttools
pres
/*SWP -- 8/14/95*/
tableSupportEnabled
table support enabled
securityType
security type
/*SWP -- 10.27.95 -- No Content Length*/
noLength
no length
/* doesn't seem to be on all X11R4 systems
#if (XtSpecificationRelease == 4)
extern void _XEditResCheckMessages();
#define EDITRES_SUPPORT
#endif
*/
EDITRES_SUPPORT
editres support
/*
 * EDITRES_SUPPORT seems to fail with the HP libraries
 */
/*Busy Cursor*/
/* for selective image loading */
imagedelay_sites
imagedelay sites
imagekill_sites
imagekill sites
Boolean
boolean
currently_delaying_images
currently delaying images
/*******************************/
/* Because Sun cripples the keysym.h file. */
XK_KP_Up
xk kp up
xk_kp_up
XK_KP_Home
xk kp home
xk_kp_home
XK_KP_Left
xk kp left
xk_kp_left
XK_KP_Right
xk kp right
xk_kp_right
XK_KP_Down
xk kp down
xk_kp_down
XK_KP_Prior
xk kp prior
xk_kp_prior
XK_KP_Next
xk kp next
xk_kp_next
XK_KP_End
xk kp end
xk_kp_end
SLAB_MENU
slab menu
SLAB_TITLE
slab title
SLAB_URL
slab url
SLAB_TOOLS
slab tools
SLAB_STATUS
slab status
SLAB_VIEW
slab view
SLAB_GLOBE
slab globe
SLAB_SMALLGLOBE
slab smallglobe
SLAB_TEXTTOOLS
slab texttools
/*
 * Globals used by the pixmaps for the animated icon.
 * Marc, I imagine you might want to do something cleaner
 * with these?
 *
 * Marc's not here, man.
 */
IconWidth
icon width
IconHeight
icon height
WindowWidth
window width
WindowHeight
window height
IconPix
icon pix
IconPixSmall
icon pix small
IconPixBig
icon pix big
mo_post_upload_window
mo post upload window
MoCCINewConnection
mo cci new connection
mo_gui_update_meter
mo gui update meter
level
text
animateCursor
animate cursor
createBusyCursors
create busy cursors
bob
stopBusyAnimation
stop busy animation
force_dump_to_file
force dump to file
HTAppVersion
ht app version
/* from cciBindings.c */
cci_event
cci event
/* for the -geometry fix (kludge) - DXP 8/30/95 */
userSpecifiedGeometry
user specified geometry
Dimension
dimension
userWidth
user width
userHeight
user height
Position
position
userX
user x
userY
user y
// SAM char *MakeFilename();
// SAM long GetCardCount(char *fname);
/* ------------------------------ variables ------------------------------- */
Display
display
dsp
XtAppContext
xt app context
app_context
app context
toplevel
view
/* HORRIBLE HACK @@@@ */
Vclass
vclass
/* visual class for 24bit support hack */
/*AppData Rdata;  /* extern'd in mosaic.h */
global_xterm_str
global xterm str
/* required for HTAccess.c now */
uncompress_program
uncompress program
gunzip_program
gunzip program
use_default_extension_map
use default extension map
global_extension_map
global extension map
personal_extension_map
personal extension map
use_default_type_map
use default type map
global_type_map
global type map
personal_type_map
personal type map
tweak_gopher_types
tweak gopher types
max_wais_responses
max wais responses
useAFS
use afs
have_hdf
have hdf
ftp_timeout_val
ftp timeout val
ftpRedial
ftp redial
ftpRedialSleep
ftp redial sleep
ftpFilenameLength
ftp filename length
ftpEllipsisLength
ftp ellipsis length
ftpEllipsisMode
ftp ellipsis mode
twirl_increment
twirl increment
sendAgent
send agent
sendReferer
send referer
imageViewInternal
image view internal
//SAM extern int do_comment;
/* --------------BalloonHelpStuff---------------------------------------- */
BalloonHelpMe
balloon help me
XEvent
x event
event
info
XtVaGetValues
xt va get values
XmNuserData
xm nuser data
XtPointer
xt pointer
mo_gui_notify_progress
mo gui notify progress
UnBalloonHelpMe
un balloon help me
xlattab
XtActionsRec
xt actions rec
balloon_action
balloon action
XtActionProc
xt action proc
/* to use balloon help, add these bits to your widget ...  BJS 2/7/96
 *    XmNtranslations, XtParseTranslationTable(xlattab),
 *    XmNuserData, (xtpointer) "Balloon Help String!",
 */
/* ------------------------------------------------------ */
/* emacs bindings to be used in text fields */
text_translations
text translations
/* this will have to be handled dynamically when we go to preferences */
url_translations
url translations
set_focus_to_view
set focus to view
take_focus
take focus
url_actions
url actions
/* this stuff is so we can properly update the current_win variable
   eliminating alot of problems with cloned windows (We love globals!)

   Globals? Where? There are no globals here! */
toplevel_translations
toplevel translations
set_current_win
set current win
toplevel_actions
toplevel actions
DISABLE_TRACE
disable trace
httpTrace
http trace
www2Trace
www2trace
htmlwTrace
htmlw trace
nutTrace
nut trace
cciTrace
cci trace
srcTrace
src trace
cacheTrace
cache trace
cci_get
cci get
HTReferer
ht referer
/* This is exported to libwww, like altogether too many other
   variables here. */
binary_transfer
binary transfer
/* Now we cache the current window right before doing a binary
   transfer, too.  Sheesh, this is not pretty. */
current_win
current win
/* If startup_document is set to anything but NULL, it will be the
   initial document viewed (this is separate from home_document
   below). */
startup_document
startup document
/* If startup_document is NULL home_document will be the initial
   document. */
home_document
home document
machine
shortmachine
machine_with_domain
machine with domain
XColor
x color
fg_color
fg color
bg_color
bg color
Cursor
cursor
busy_cursor
busy cursor
busy
busylist
cached_url
cached url
/* Forward declaration of test predicate. */
anchor_visited_predicate
anchor visited predicate
/* When we first start the application, we call mo_startup()
   after creating the unmapped toplevel widget.  mo_startup()
   either sets the value of this to 1 or 0.  If 0, we don't
   open a starting window. */
defer_initial_window
defer initial window
/* Pixmaps for interrupt button. */
xmosaic_up_pix
xmosaic up pix
xmosaic_left_pix
xmosaic left pix
xmosaic_down_pix
xmosaic down pix
xmosaic_right_pix
xmosaic right pix
MAX_BUSY_CURSORS
max busy cursors
numCursors
num cursors
/* Pixmaps for the busy cursor animation */
busyCursor
busy cursor
/* Pixmaps for security button. */
security_pix
security pix
toolbarBack
toolbar back
toolbarForward
toolbar forward
toolbarHome
toolbar home
toolbarReload
toolbar reload
toolbarOpen
toolbar open
toolbarSave
toolbar save
toolbarClone
toolbar clone
toolbarNew
toolbar new
toolbarClose
toolbar close
toolbarBackGRAY
toolbar back gray
toolbarForwardGRAY
toolbar forward gray
toolbarSearch
toolbar search
toolbarPrint
toolbar print
toolbarPost
toolbar post
toolbarFollow
toolbar follow
tearv
tearh
toolbarPostGRAY
toolbar post gray
toolbarFollowGRAY
toolbar follow gray
toolbarNewsFwd
toolbar news fwd
toolbarNewsFFwd
toolbar news ffwd
toolbarNewsRev
toolbar news rev
toolbarNewsFRev
toolbar news frev
toolbarNewsIndex
toolbar news index
toolbarAddHotlist
toolbar add hotlist
toolbarNewsGroups
toolbar news groups
toolbarNewsFwdGRAY
toolbar news fwd gray
toolbarNewsFFwdGRAY
toolbar news f fwd gray
toolbarNewsRevGRAY
toolbar news rev gray
toolbarNewsFRevGRAY
toolbar news f rev gray
toolbarNewsIndexGRAY
toolbar news index gray
toolbarFTPput
toolbar ft pput
toolbarFTPmkdir
toolbar ft pmkdir
securityKerberos4
security kerberos4
securityBasic
security basic
securityMd5
security md5
securityNone
security none
securityUnknown
security unknown
securityKerberos5
security kerberos5
securityDomain
security domain
securityLogin
security login
enc_not_secure
enc not secure
HTDescribeURL
ht describe url
mo_status
mo status
mo_post_access_document
mo post access document
url
content_type
content type
post_data
post data
XmxCallbackPrototype
xmx callback prototype
menubar_cb
menubar cb
utsname
mo_uname
mo uname
/* ----------------------------- WINDOW LIST ------------------------------ */
winlist
wincount
/* Return either the first window in the window list or the next
   window after the current window. */
mo_next_window
mo next window
next
/* Return a window matching a specified uniqid. */
mo_fetch_window_by_id
mo fetch window by id
id
/*        goto done;*/
/* notfound:*/
/*
 done:
  return win;*/
/* Register a window in the window list. */
mo_add_window_to_list
mo add window to list
mo_succeed
mo succeed
/* Remove a window from the window list. */
mo_remove_window_from_list
mo remove window from list
prev
/* Delete w. */
/* No previous window. */
free
/* Maybe exit. */
mo_exit
mo exit
/* Previous window. */
/* Couldn't find it. */
mo_fail
mo fail
/*
 * THIS IS NOT USED ANYMORE!
 */
/****************************************************************************
 * name:    mo_check_for_proxy
 * purpose: Return the location of the proxy gateway for the passed access
 *	    method.
 * inputs:
 *   - char *access: access string from the URL (http, gopher, ftp, etc)
 * returns:
 *   The proxy gateway to use. (http://proxy.ncsa.uiuc.edu:911/)
 * remarks: This should really be open-ended configurable.
 ****************************************************************************/
mo_check_for_proxy
mo check for proxy
access
/*
	if (access == NULL)
	{
		return((char *)NULL);
	}
	else if (strcmp(access, "http") == 0)
	{
		return(Rdata.http_proxy);
	}
	else if (strcmp(access, "ftp") == 0)
	{
		return(Rdata.ftp_proxy);
	}
	else if (strcmp(access, "wais") == 0)
	{
		return(Rdata.wais_proxy);
	}
	else if (strcmp(access, "gopher") == 0)
	{
		return(Rdata.gopher_proxy);
	}
	else if (strcmp(access, "news") == 0)
	{
		return(Rdata.news_proxy);
	}
	else if (strcmp(access, "file") == 0)
	{
		return(Rdata.file_proxy);
	}
	else
	{
*/
/*
	}
*/
/****************************************************************************
 * name:    mo_assemble_help_url
 * purpose: Make a temporary, unique filename.
 * inputs:
 *   - char *file: Filename to be appended to Rdata.docs_directory.
 * returns:
 *   The desired help url (a malloc'd string).
 * remarks:
 ****************************************************************************/
mo_assemble_help_url
mo assemble help url
file
tmp
docs_directory
docs directory
get_pref_string
get pref string
eDOCS_DIRECTORY
edocs directory
e docs_directory
strdup
malloc
strlen
/* Trailing slash in docs_directory spec. */
sprintf
/* No trailing slash. */
/* ----------------------------- busy cursor ------------------------------ */
mo_not_busy
mo not busy
/* This is done from mo_gui_done_with_icon() */
XUndefineCursor
x undefine cursor
XtWindow
xt window
base
history_win
history win
hotlist_win
hotlist win
searchindex_win
searchindex win
XFlush
x flush
/* For lack of a better place, we do the iconify icon stuff here as well...
    --SWP */
i
pmap
mmap
imap
imaskmap
ccell1
ccell_fg
ccell fg
ccell_bg
ccell bg
/*
XWMHints *whints=XAllocWMHints();

	imap = XCreatePixmapFromBitmapData
	(XtDisplay(toplevel), XtWindow(toplevel),
	 iconify_bits, iconify_width, iconify_height, 1, 0, 1);
	imaskmap = XCreatePixmapFromBitmapData
	(XtDisplay(toplevel), XtWindow(toplevel),
	 iconify_mask_bits, iconify_mask_width, iconify_mask_height, 1, 0, 1);

	whints->flags=IconPixmapHint|IconMaskHint;
	whints->icon_pixmap=imap;
	whints->icon_mask=imaskmap;
	XSetWMHints(XtDisplay(toplevel),XtWindow(toplevel),whints);
*/
get_pref_boolean
get pref boolean
eANIMATEBUSYICON
e animatebusyicon
XAllocNamedColor
x alloc named color
DefaultColormapOfScreen
default colormap of screen
XtScreen
xt screen
XCreatePixmapFromBitmapData
x create pixmap from bitmap data
XtDisplay
xt display
DefaultRootWindow
default root window
busy_1_mask_bits
busy 1 mask bits
busy_1_mask_width
busy 1 mask width
busy_1_mask_height
busy 1 mask height
busy_1_bits
busy 1 bits
busy_1_width
busy 1 width
busy_1_height
busy 1 height
XCreatePixmapCursor
x create pixmap cursor
busy_1_x_hot
busy 1 x hot
busy_1_y_hot
busy 1 y hot
XFreePixmap
x free pixmap
busy_2_mask_bits
busy 2 mask bits
busy_2_mask_width
busy 2 mask width
busy_2_mask_height
busy 2 mask height
busy_2_bits
busy 2 bits
busy_2_width
busy 2 width
busy_2_height
busy 2 height
busy_2_x_hot
busy 2 x hot
busy_2_y_hot
busy 2 y hot
busy_3_mask_bits
busy 3 mask bits
busy_3_mask_width
busy 3 mask width
busy_3_mask_height
busy 3 mask height
busy_3_bits
busy 3 bits
busy_3_width
busy 3 width
busy_3_height
busy 3 height
busy_3_x_hot
busy 3 x hot
busy_3_y_hot
busy 3 y hot
busy_4_mask_bits
busy 4 mask bits
busy_4_mask_width
busy 4 mask width
busy_4_mask_height
busy 4 mask height
busy_4_bits
busy 4 bits
busy_4_width
busy 4 width
busy_4_height
busy 4 height
busy_4_x_hot
busy 4 x hot
busy_4_y_hot
busy 4 y hot
busy_5_mask_bits
busy 5 mask bits
busy_5_mask_width
busy 5 mask width
busy_5_mask_height
busy 5 mask height
busy_5_bits
busy 5 bits
busy_5_width
busy 5 width
busy_5_height
busy 5 height
busy_5_x_hot
busy 5 x hot
busy_5_y_hot
busy 5 y hot
busy_6_mask_bits
busy 6 mask bits
busy_6_mask_width
busy 6 mask width
busy_6_mask_height
busy 6 mask height
busy_6_bits
busy 6 bits
busy_6_width
busy 6 width
busy_6_height
busy 6 height
busy_6_x_hot
busy 6 x hot
busy_6_y_hot
busy 6 y hot
busy_7_mask_bits
busy 7 mask bits
busy_7_mask_width
busy 7 mask width
busy_7_mask_height
busy 7 mask height
busy_7_bits
busy 7 bits
busy_7_width
busy 7 width
busy_7_height
busy 7 height
busy_7_x_hot
busy 7 x hot
busy_7_y_hot
busy 7 y hot
busy_8_mask_bits
busy 8 mask bits
busy_8_mask_width
busy 8 mask width
busy_8_mask_height
busy 8 mask height
busy_8_bits
busy 8 bits
busy_8_width
busy 8 width
busy_8_height
busy 8 height
busy_8_x_hot
busy 8 x hot
busy_8_y_hot
busy 8 y hot
busy_9_mask_bits
busy 9 mask bits
busy_9_mask_width
busy 9 mask width
busy_9_mask_height
busy 9 mask height
busy_9_bits
busy 9 bits
busy_9_width
busy 9 width
busy_9_height
busy 9 height
busy_9_x_hot
busy 9 x hot
busy_9_y_hot
busy 9 y hot
XDefineCursor
x define cursor
mo_busy
mo busy
/* This happens in mo_gui_check_icon */
/*
	if (!busy) {
	}
*/
HAVE_DTM
have dtm
/* --------------------- mo_set_dtm_menubar_functions --------------------- */
mo_set_dtm_menubar_functions
mo set dtm menubar functions
mo_dtm_out_active_p
mo dtm out active p
/* If we've got an active outport, then we can send a document
         but not open another outport. */
XmxRSetSensitive
xmx r set sensitive
menubar
mo_dtm_open_outport
mo dtm open outport
XmxNotSensitive
xmx not sensitive
mo_dtm_send_document
mo dtm send document
XmxSensitive
xmx sensitive
/* If we don't have an active outport, then we can't send a document
         but we can open an outport. */
/****************************************************************************
 * name:    mo_redisplay_window
 * purpose: Cause the current window's HTML widget to be refreshed.
 *          This causes the anchors to be reexamined for visited status.
 * inputs:
 *   - mo_window *win: Current window.
 * returns:
 *   mo_succeed
 * remarks:
 *
 ****************************************************************************/
mo_redisplay_window
mo redisplay window
curl
HTMLRetestAnchors
html retest anchors
scrolled_win
scrolled win
/* ---------------------- mo_set_current_cached_win ----------------------- */
mo_set_current_cached_win
mo set current cached win
connect_interrupt
connect interrupt
sleep_interrupt
sleep interrupt
XmxCallback
xmx callback
icon_pressed_cb
icon pressed cb
MoCCISendEventOutput
mo cci send event output
MOSAIC_GLOBE
mosaic globe
security_pressed_cb
security pressed cb
buf
BUFSIZ
current_node
current node
AUTHENTICATION_BUTTON
authentication button
mo_gui_check_security_icon
mo gui check security icon
authType
auth type
HTAA_NONE
htaa none
strcpy
HTAA_BASIC
htaa basic
HTAA_KERBEROS_V4
htaa kerberos v4
HTAA_KERBEROS_V5
htaa kerberos v5
HTAA_MD5
htaa md5
HTAA_DOMAIN
htaa domain
HTAA_LOGIN
htaa login
HTAA_UNKNOWN
htaa unknown
application_user_info_wait
application user info wait
/* ----------------------- editable URL field callback -------------------- */
/* If the user hits return in the URL text field at the top of the display, */
/* then go fetch that URL  -- amb                                           */
url_field_cb
url field cb
XmxExtractUniqid
xmx extract uniqid
client_data
client data
xurl
XmTextVerifyCallbackStruct
xm text verify callback struct
cbs
call_data
call data
eFOCUS_FOLLOWS_MOUSE
efocus follows mouse
e focus_follows_mouse
XtSetKeyboardFocus
xt set keyboard focus
MOSAIC_URL_TEXT_FIELD
mosaic url text field
XmxTextGetString
xmx text get string
url_text
url text
mo_convert_newlines_to_spaces
mo convert newlines to spaces
mo_url_prepend_protocol
mo url prepend protocol
mo_load_window_text
mo load window text
LINK_LOADED
link loaded
/****************************************************************************
 * name:    anchor_cb
 * purpose: Callback for triggering anchor in HTML widget.
 * inputs:
 *   - as per XmxCallback
 * returns:
 *   nothing
 * remarks:
 *   This is too complex and should be broken down.
 *   We look at the button event passed in through the callback;
 *   button1 == same window, button2 == new window.
 *   Call mo_open_another_window or mo_load_window_text to get
 *   the actual work done.
 ****************************************************************************/
anchor_cb
anchor cb
href
reftext
/*  char *access;*/
referer
XButtonReleasedEvent
x button released event
WbAnchorCallbackData
wb anchor callback data
force_newwin
force newwin
button
Button2
button2
old_binx_flag
old binx flag
MOSAIC_URL_TRIGGER
mosaic url trigger
/* if shift was down, make this a Load to Local Disk -- amb */
state
ShiftMask
shift mask
eKIOSK
e kiosk
eKIOSKNOEXIT
e kiosknoexit
eDISABLEMIDDLEBUTTON
e disablemiddlebutton
/* disable new window if in kiosk mode*/
/* disable load to disk in kiosk */
ePROTECT_ME_FROM_MYSELF
eprotect me from myself
e protect_me_from_myself
answer
XmxModalYesOrNo
xmx modal yes or no
/* amb */
/*SWP*/
my_strncasecmp
my strncasecmp
/* what if hostname is a partial local? */
target
mo_url_extract_anchor
mo url extract anchor
mo_url_canonicalize_keep_anchor
mo url canonicalize keep anchor
/* @@@ should we be keeping the anchor here??? */
strncmp
/* Not a telnet anchor. */
/* Open the window (generating a new cached_url). */
mo_open_another_window
mo open another window
/* Now redisplay this window. */
/* Just do mo_load_window_text go get the xterm forked off. */
/****************************************************************************
 * name:    anchor_visited_predicate (PRIVATE)
 * purpose: Called by the HTML widget to determine whether a given URL
 *          has been previously visited.
 * inputs:
 *   - Widget   w: HTML widget that called this routine.
 *   - char *href: URL to test.
 * returns:
 *   1 if href has been visited previously; 0 otherwise.
 * remarks:
 *   All this does is canonicalize the URL and call
 *   mo_been_here_before_huh_dad() to figure out if we've been
 *   there before.
 ****************************************************************************/
rv
eTRACK_VISITED_ANCHORS
etrack visited anchors
e track_visited_anchors
/* This doesn't do special things for data elements inside
     an HDF file, because it's faster this way. */
mo_url_canonicalize
mo url canonicalize
mo_been_here_before_huh_dad
mo been here before huh dad
pointer_motion_callback
pointer motion callback
XmString
xm string
xmstr
to_free
to free
to_free_2
to free 2
eTRACK_POINTER_MOTION
etrack pointer motion
e track_pointer_motion
/* Sigh... */
/* This is now the option wherein the URLs are just spit up there;
         else we put up something more friendly. */
eTRACK_FULL_URL_NAMES
etrack full url names
e track_full_url_names
/* Everything already done... */
/* This is where we go get a good description. */
XmStringCreateSimple
xm string create simple
XtVaSetValues
xt va set values
tracker_label
tracker label
XmNlabelString
xm nlabel string
XtArgVal
xt arg val
XmStringFree
xm string free
submit_form_callback
submit form callback
method
enctype
query
len
WbFormCallbackData
wb form callback data
cbdata
do_post_urlencoded
do post urlencoded
plaintext
entity
foundit
/* Shit outta luck. */
FORM_SUBMIT
form submit
/* Initial query: Breathing space. */
/* Add up lengths of strings. */
attribute_count
attribute count
attribute_names
attribute names
attribute_values
attribute values
/* Get the URL. */
/* Grab enctype if it's there. */
/* Grab encentity if it's there and we have an enctype. */
enc_entity
enc entity
fprintf
stderr
my_strcasecmp
my strcasecmp
/* Clip out anchor. */
strtok
/* Clip out old query. */
strcat
format
/* Get ready for cats below. */
/* Take isindex possibility into account. */
strcmp
c
mo_escape_part
mo escape part
/* For all but the first, lead off with an ampersand. */
/* Rack 'em up. */
MoCCIFormToClient
mo cci form to client
mo_access_document
mo access document
/* This only gets called by the widget in the middle of set_text. */
link_callback
link callback
LinkInfo
link info
linfo
url_base_override
url base override
/* Free -nothing- in linfo. */
/* Set the URL cache variables to the correct values NOW. */
role
/* Do nothing with the role crap yet. */
/* Exported to libwww2. */
msg
XmUpdateDisplay
xm update display
UpdateButtons
update buttons
display
XSync
x sync
XCheckMaskEvent
x check mask event
ButtonPressMask
button press mask
ButtonReleaseMask
button release mask
XButtonEvent
x button event
bevent
xbutton
window
logo
XtDispatchEvent
xt dispatch event
/* else just throw it away... users shouldn't be pressing buttons
         in the middle of transfers anyway... */
/*SWP 7/3/95*/
mo_gui_check_security_icon_in_win
mo gui check security icon in win
type
ret
pix
current
eSECURITYICON
e securityicon
DrawSecurityPixmap
draw security pixmap
security
logo_count
logo count
logo_save
logo save
mo_gui_check_icon
mo gui check icon
twirl
cnt
eTWIRLING_TRANSFER_ICON
etwirling transfer icon
e twirling_transfer_icon
AnimatePixmapInWidget
animate pixmap in widget
get_pref_int
get pref int
ePIX_COUNT
epix count
e pix_count
mo_gui_clear_icon
mo gui clear icon
mo_gui_apply_default_icon
mo gui apply default icon
XmxApplyPixmapToLabelWidget
xmx apply pixmap to label widget
mo_gui_done_with_icon
mo gui done with icon
ungrab_the_____ing_pointer
ungrab the     ing pointer
set_pref
set pref
XClearArea
x clear area
True
true
HTMLSetAppSensitive
html set app sensitive
/* this works dammit (trust me) - TPR */
XtAppAddTimeOut
xt app add time out
XtTimerCallbackProc
xt timer callback proc
mo_presentation_mode
mo presentation mode
mo_duplicate_window
mo duplicate window
mo_delete_window
mo delete window
/****************************************************************************
 * name:    mo_view_keypress_handler (PRIVATE)
 * purpose: This is the event handler for the HTML widget and associated
 *          scrolled window; it handles keypress events and enables the
 *          hotkey support.
 * inputs:
 *   - as per XmxEventHandler
 * returns:
 *   nothing
 * remarks:
 *   Hotkeys and their actions are currently hardcoded.  This is probably
 *   a bad idea, and Eric hates it.
 ****************************************************************************/
XmxEventHandler
xmx event handler
mo_view_keypress_handler
mo view keypress handler
/*  char url[128]; /* buffer for news io */
_bufsize
 bufsize
_count
 count
_buffer
 buffer
KeySym
key sym
_key
 key
XComposeStatus
x compose status
_cs
 cs
sb
String
string
params
/* Go get ascii translation. */
XLookupString
x lookup string
xkey
/* I don't know why this is necessary but for some reason the rbm was making
     the above function return 0 as the _key, this fixes it -- TPR */
XKeycodeToKeysym
x keycode to keysym
keycode
/* Insert trailing Nil. */
XK_Prior
xk prior
xk_prior
/* Page up. */
eCATCH_PRIOR_AND_NEXT
ecatch prior and next
e catch_prior_and_next
XK_BackSpace
xk backspace
xk_back space
XK_Delete
xk delete
xk_delete
XmNverticalScrollBar
xm nvertical scroll bar
XtIsManaged
xt is managed
XtCallActionProc
xt call action proc
XK_Next
xk next
xk_next
/* Page down. */
XK_Return
xk return
xk_return
XK_space
xk space
xk_space
XK_Tab
xk tab
xk_tab
ControlMask
control mask
HTMLTraverseTabGroups
html traverse tab groups
XmTRAVERSE_HOME
xmtraverse home
xm traverse_home
XmTRAVERSE_NEXT_TAB_GROUP
xmtraverse next tab group
xm traverse_next_tab_group
XK_Home
xk home
xk_home
/* Home -- Top */
HTMLGotoId
html goto id
XK_End
xk end
xk_end
/* End -- Bottom */
HTMLLastId
html last id
XK_Down
xk down
xk_down
XK_Right
xk right
xk_right
XmNhorizontalScrollBar
xm nhorizontal scroll bar
XK_Up
xk up
xk_up
XK_Left
xk left
xk_left
/* News Hotkeys ...
                 < > = prev/next thread  , . = prev/next message */
XK_less
xk less
xk_less
gui_news_prevt
gui news prevt
XK_greater
xk greater
xk_greater
gui_news_nextt
gui news nextt
XK_comma
xk comma
xk_comma
gui_news_prev
gui news prev
XK_period
xk period
xk_period
gui_news_next
gui news next
XK_A
xk a
/* Annotate. */
XK_a
xk a
xk_a
mo_post_annotate_win
mo post annotate win
XK_B
xk b
/* Back. */
XK_b
xk b
xk_b
mo_back_node
mo back node
XK_C
xk c
/* Clone */
XK_c
xk c
xk_c
XK_D
xk d
/* Document source. */
XK_d
xk d
xk_d
mo_post_source_window
mo post source window
XK_E
xk e
/* Edit */
XK_e
xk e
xk_e
mo_edit_source
mo edit source
XK_F
xk f
XK_f
xk f
xk_f
slab
XmTextFieldSetString
xm text field set string
XmTextSetInsertionPosition
xm text set insertion position
mo_forward_node
mo forward node
XK_H
xk h
/* Hotlist */
mo_post_hotlist_win
mo post hotlist win
XK_h
xk h
xk_h
/* History */
mo_post_history_win
mo post history win
XK_L
xk l
/* Open Local */
XK_l
xk l
xk_l
mo_post_open_local_window
mo post open local window
XK_M
xk m
/* Mailto */
XK_m
xk m
xk_m
mo_post_mail_window
mo post mail window
XK_N
xk n
/* New */
XK_n
xk n
xk_n
XK_O
xk o
/* Open */
XK_o
xk o
xk_o
mo_post_open_window
mo post open window
XK_P
xk p
/* Print */
XK_p
xk p
xk_p
/*
	  if(event->xkey.state & ControlMask) {
		mo_presentation_mode(win);
	  }
	  else
*/
mo_post_print_window
mo post print window
XK_r
xk r
xk_r
/* reload */
mo_reload_window_text
mo reload window text
XK_R
xk r
/* Refresh */
mo_refresh_window_text
mo refresh window text
XK_S
xk s
/* Search. */
XK_s
xk s
xk_s
mo_post_search_window
mo post search window
/* Tag 'n Bag */
/*
      case XK_T:
      case XK_t:
	  mo_tagnbag_url (win);
          break;
          */
/* Not active */
SWP_NOT_DONE
swp not done
XK_U
xk u
/* Upload a file (method of put) */
XK_u
xk u
xk_u
XK_Z
xk z
XK_z
xk z
xk_z
str
XmTextFieldGetString
xm text field get string
XmTextFieldSetSelection
xm text field set selection
time
XtFree
xt free
XK_Escape
xk escape
xk_escape
/* Kiosk */
/* Forward */
/* Callback to redraw the meter -bjs */
ResizeMeter
resize meter
meter
client
call
DrawMeter
draw meter
GC
gc
mask
XGCValues
xgc values
values
l
ss
s
last_len
last len
current_len
current len
resize
finished
eMETER
e meter
XtGetGC
xt get gc
meter_width
meter width
meter_level
meter level
XSetForeground
x set foreground
meter_bg
meter bg
XFillRectangle
x fill rectangle
meter_height
meter height
meter_fg
meter fg
meter_text
meter text
meter_notext
meter notext
meter_font
meter font
WbNmeterFont
wb nmeter font
/*
 = XLoadQueryFont(XtDisplay(win->base),ftext))) {
*/
puts
meter_fontW
meter fontw
meter_font w
max_bounds
max bounds
rbearing
meter_fontH
meter fonth
meter_font h
ascent
/* +			win->meter_font->max_bounds.descent;*/
font
fid
/*
		values.function = GXxor;
		values.background = win->meter_bg;
		mask |= GCFont | GCFunction | GCBackground;
*/
GCFont
gc font
XChangeGC
x change gc
meter_font_bg
meter font bg
XDrawString
x draw string
meter_font_fg
meter font fg
XtReleaseGC
xt release gc
XWindowAttributes
x window attributes
wattr
XGetWindowAttributes
x get window attributes
width
height
/* Exported to libwww2 */
/* take a text string of the form "MENU,URL,VIEW,STATUS" and set the
   layout slab stuff from it */
/* WARNING:  The code to draw the interface expects the rules enforced herein
   to be followed... just taking out the safety checks here could cause some
   major headaches. BJS */
parse_slabinfo
parse slabinfo
k
j
done
p
next1
isalpha
toupper
/* do some idiot-proofing */
/* check for duplicate slabs */
/* whew. made it. */
tool
mo_tools
mo tools
mo_back
mo back
moMODE_ALL
momode all
mo mode_all
mo_forward
mo forward
mo_reload_document
mo reload document
mo_home_document
mo home document
mo_open_document
mo open document
mo_save_document
mo save document
mo_new_window
mo new window
mo_clone_window
mo clone window
mo_close_window
mo close window
mo_register_node_in_default_hotlist
mo register node in default hotlist
moMODE_PLAIN
momode plain
mo mode_plain
mo_search
mo search
mo_print_document
mo print document
mo_news_groups
mo news groups
/* News Mode */
mo_news_index
mo news index
moMODE_NEWS
momode news
mo mode_news
mo_news_prevt
mo news prevt
mo_news_prev
mo news prev
mo_news_next
mo news next
mo_news_nextt
mo news nextt
mo_news_post
mo news post
mo_news_follow
mo news follow
/* FTP Mode */
mo_ftp_put
mo ftp put
moMODE_FTP
momode ftp
mo mode_ftp
mo_ftp_mkdir
mo ftp mkdir
/* NOTE: THESE MUST COINCIDE EXACTLY WITH mo_tools!!! */
tool_names
tool names
use_tool
use tool
BTN_COUNT
btn count
mo_get_tools_from_res
mo get tools from res
tools
ptr
start
end
eTOOLBAR_LAYOUT
etoolbar layout
e toolbar_layout
eKIOSKPRINT
e kioskprint
isspace
strchr
mo_make_globe
mo make globe
parent
small
mo_tool_detach_cb
mo tool detach cb
wx
cli
Atom
atom
WM_DELETE_WINDOW
wm delete window
/* Xmx sucks */
XmxSetUniqid
xmx set uniqid
XtUnmanageChild
xt unmanage child
XtParent
xt parent
toolbardetached
toolbarwin
XtDestroyWidget
xt destroy widget
topform
biglogo
button_rc
button rc
button2_rc
button2 rc
encrypt
XtVaCreatePopupShell
xt va create popup shell
/*             topLevelShellWidgetClass,*/
xmDialogShellWidgetClass
xm dialog shell widget class
XmNminHeight
xm nmin height
toolbarorientation
XmNminWidth
xm nmin width
XmNmaxHeight
xm nmax height
XmNmaxWidth
xm nmax width
XmNheight
xm nheight
XmNwidth
xm nwidth
XmNallowShellResize
xm nallow shell resize
FALSE
XtManageChild
xt manage child
XtVaCreateWidget
xt va create widget
xmFormWidgetClass
xm form widget class
XmInternAtom
xm intern atom
False
false
XmAddWMProtocolCallback
xm add wm protocol callback
XtPopup
xt popup
XtGrabNone
xt grab none
mo_switch_mode
mo switch mode
label
toolset
mode
mo_tool_state
mo tool state
toolbar
t
index
XmxSetSensitive
xmx set sensitive
gray
mo_extra_buttons
mo extra buttons
XmxMakeNamedPushButton
xmx make named push button
XmNmarginWidth
xm nmargin width
XmNmarginHeight
xm nmargin height
XmNmarginTop
xm nmargin top
XmNmarginBottom
xm nmargin bottom
XmNmarginLeft
xm nmargin left
XmNmarginRight
xm nmargin right
XmNtraversalOn
xm ntraversal on
XtOverrideTranslations
xt override translations
XtParseTranslationTable
xt parse translation table
XtVaCreateManagedWidget
xt va create managed widget
xmPushButtonWidgetClass
xm push button widget class
/* insure we set the security icon! */
XmNtopAttachment
xm ntop attachment
XmATTACH_FORM
xmattach form
xm attach_form
XmNbottomAttachment
xm nbottom attachment
XmNleftAttachment
xm nleft attachment
XmATTACH_NONE
xmattach none
xm attach_none
XmNrightAttachment
xm nright attachment
XmATTACH_WIDGET
xmattach widget
xm attach_widget
XmNleftWidget
xm nleft widget
XmNrightWidget
xm nright widget
XmNtopWidget
xm ntop widget
/* create topform and fill it with toolbar bits'n'pieces */
rightform
tearbutton
btn
vert
textbuttons
texttools
long_text
long text
eUSE_LONG_TEXT_NAMES
euse long text names
e use_long_text_names
XFontStruct
x font struct
tmpFont
tmp font
XmFontList
xm font list
tmpFontList
tmp font list
WbNtoolbarFont
wb ntoolbar font
exit
XmFontListCreate
xm font list create
XmSTRING_DEFAULT_CHARSET
xmstring default charset
xm string_default_charset
/* Which tools to show */
xmRowColumnWidgetClass
xm row column widget class
XmNorientation
xm norientation
XmVERTICAL
xm vertical
XmHORIZONTAL
xm horizontal
XmNspacing
xm nspacing
XmNleftOffset
xm nleft offset
XmNrightOffset
xm nright offset
XmNtopOffset
xm ntop offset
XmNbottomOffset
xm nbottom offset
/*         XmNpacking, XmPACK_TIGHT,*/
XmNpacking
xm npacking
XmPACK_TIGHT
xmpack tight
xm pack_tight
/*
         XmNmarginWidth, 1,
*/
XmNlabelType
xm nlabel type
XmSTRING
xm string
XmPIXMAP
xm pixmap
XmNlabelPixmap
xm nlabel pixmap
XmNfontList
xm nfont list
XtAddCallback
xt add callback
XmNactivateCallback
xm nactivate callback
action
/*
                 XmNmarginLeft, textbuttons ? 2 : 0,
                 XmNmarginRight, textbuttons ? 2 : 0,
*/
XmNalignment
xm nalignment
XmALIGNMENT_CENTER
xmalignment center
xm alignment_center
image
greyimage
XmNlabelInsensitivePixmap
xm nlabel insensitive pixmap
XmxAddCallback
xmx add callback
xmSeparatorWidgetClass
xm separator widget class
XmNseparatorType
xm nseparator type
XmNO_LINE
xmno line
xm no_line
/****************************************************************************
 * name:    mo_fill_window (PRIVATE)
 * purpose: Take a new (empty) mo_window struct and fill in all the
 *          GUI elements.
 * inputs:
 *   - mo_window *win: The window.
 * returns:
 *   mo_succeed
 * remarks:
 *
 ****************************************************************************/
mo_fill_window
mo fill window
up
dn
linkup
topatt
botatt
form
botform
title_label
title label
url_label
url label
globe
pres_slab
pres slab
kiosk_slab
kiosk slab
eGUI_LAYOUT
egui layout
e gui_layout
/*we be kiosking*/
/* go with the default layout */
slabcount
slabpart
/* no active toolset, horiz, not detached */
/*********************** SLAB_GLOBE ****************************/
/*********************** SLAB_MENU ****************************/
mo_make_document_view_menubar
mo make document view menubar
/*********************** SLAB_TITLE ****************************/
xmLabelWidgetClass
xm label widget class
title_text
title text
xmTextFieldWidgetClass
xm text field widget class
XmNeditable
xm neditable
XmNcursorPositionVisible
xm ncursor position visible
/*********************** SLAB_URL ****************************/
/* DO THIS WITH THE SLAB MANAGER - BJS */
XmxAddCallbackToText
xmx add callback to text
/*********************** SLAB_VIEW ****************************/
htmlWidgetClass
html widget class
WbNtext
wb ntext
XmNresizePolicy
xm nresize policy
XmRESIZE_ANY
xmresize any
xm resize_any
WbNpreviouslyVisitedTestFunction
wb npreviously visited test function
WbNpointerMotionCallback
wb npointer motion callback
WbNfancySelections
wb nfancy selections
pretty
WbNdelayImageLoads
wb ndelay image loads
delay_image_loads
delay image loads
XmNshadowThickness
xm nshadow thickness
mo_register_image_resolution_function
mo register image resolution function
WbNanchorCallback
wb nanchor callback
WbNlinkCallback
wb nlink callback
WbNsubmitFormCallback
wb nsubmit form callback
WbNview
wb nview
XmxAddEventHandler
xmx add event handler
KeyPressMask
key press mask
/* now that the htmlWidget is created we can do this  */
mo_make_popup
mo make popup
/*********************** SLAB_STATUS ****************************/
set_pref_boolean
set pref boolean
/* meter */
meter_frame
meter frame
XmxMakeFrame
xmx make frame
XmxShadowIn
xmx shadow in
xmDrawingAreaWidgetClass
xm drawing area widget class
XmNexposeCallback
xm nexpose callback
XmNresizeCallback
xm nresize callback
/* grab some colors */
ccell2
eMETER_FOREGROUND
emeter foreground
e meter_foreground
pixel
eMETER_BACKGROUND
emeter background
e meter_background
eMETER_FONT_FOREGROUND
emeter font foreground
e meter_font_foreground
eMETER_FONT_BACKGROUND
emeter font background
e meter_font_background
XmALIGNMENT_BEGINNING
xmalignment beginning
xm alignment_beginning
/*********************** SLAB_TOOLS ****************************/
/* chain those slabs together 'n stuff */
/* next two slabs have to attach to the globe */
XmNbottomWidget
xm nbottom widget
/* we change link dir here AND link this slab both ways*/
/*
          fprintf(stderr,"%s (0x%08X): up=0x%08X dn=0x%08X ta=%d ba=%d\n",
                  slab_words[win->slabpart[i]], win->slab[win->slabpart[i]],
                  up, dn, topatt, botatt);
                  */
/* Can't go back or forward if we haven't gone anywhere yet... */
mo_back_impossible
mo back impossible
mo_forward_impossible
mo forward impossible
/****************************************************************************
 * name:    mo_delete_window
 * purpose: Shut down a window.
 * inputs:
 *   - mo_window *win: The window.
 * returns:
 *   mo_succeed
 * remarks:
 *   This can be called, among other places, from the WM_DELETE_WINDOW
 *   handler.  By the time we get here, we must assume the window is already
 *   in the middle of being shut down.
 *   We must explicitly close every dialog that be open as a child of
 *   the window, because window managers too stupid to do that themselves
 *   will otherwise allow them to stay up.
 ****************************************************************************/
POPDOWN(x)
popdown(x)
mo_node
mo node
node
history
POPDOWN
source_win
source win
save_win
save win
savebinary_win
savebinary win
open_win
open win
mail_win
mail win
mailhist_win
mailhist win
print_win
print win
open_local_win
open local win
techsupport_win
techsupport win
annotate_win
annotate win
search_win
search win
mailto_win
mailto win
mailto_form_win
mailto form win
news_win
news win
links_win
links win
dtmout_win
dtmout win
HAVE_AUDIO_ANNOTATIONS
have audio annotations
audio_annotate_win
audio annotate win
XtPopdown
xt popdown
/* we really should be doing this :-) BJS */
/* Free up some of the HTML Widget's state */
HTMLFreeImageInfo
html free image info
tofree
mo_free_node_data
mo free node data
search_start
search start
search_end
search end
/* This will free the win structure (but none of its elements
     individually) and exit if this is the last window in the list. */
/* Go get another current_win. */
mo_get_font_size_from_res
mo get font size from res
userfontstr
fontfamily
lowerfontstr
x
tolower
strstr
mo_large_fonts
mo large fonts
mo_regular_fonts
mo regular fonts
mo_small_fonts
mo small fonts
mo_large_helvetica
mo large helvetica
mo_regular_helvetica
mo regular helvetica
mo_small_helvetica
mo small helvetica
mo_large_newcentury
mo large newcentury
mo_regular_newcentury
mo regular newcentury
mo_small_newcentury
mo small newcentury
mo_large_lucidabright
mo large lucidabright
mo_regular_lucidabright
mo regular lucidabright
mo_small_lucidabright
mo small lucidabright
ReleaseSplashColors
release splash colors
gui_news_updateprefs
gui news updateprefs
mo_set_agents
mo set agents
which
mo_sync_windows
mo sync windows
font_size
font size
mo_set_fonts
mo set fonts
underlines_state
underlines state
mo_set_underlines
mo set underlines
agent_state
agent state
image_view_internal
image view internal
XmxRSetToggleState
xmx r set toggle state
mo_image_view_internal
mo image view internal
XmxSet
xmx set
XmxNotSet
xmx not set
table_support
table support
mo_table_support
mo table support
body_color
body color
WbNbodyColors
wb nbody colors
mo_body_color
mo body color
body_images
body images
WbNbodyImages
wb nbody images
mo_body_images
mo body images
XmxSetArg
xmx set arg
XmxSetValues
xmx set values
mo_expand_images_current
mo expand images current
mo_delay_image_loads
mo delay image loads
/****************************************************************************
 * name:    mo_open_window_internal (PRIVATE)
 * purpose: Make a mo_window struct and fill up the GUI.
 * inputs:
 *   - Widget       base: The dialog widget on which this window is
 *                        to be based.
 *   - mo_window *parent: The parent mo_window struct for this window,
 *                        if one exists; this can be NULL.
 * returns:
 *   The new window (mo_window *).
 * remarks:
 *   This routine must set to 0 all elements in the mo_window struct
 *   that can be tested by various routines to see if various things
 *   have been done yet (popup windows created, etc.).
 ****************************************************************************/
/* FOO */
mo_open_window_internal
mo open window internal
dialog_pixmap
dialog pixmap
XmxMakeNewUniqid
xmx make new uniqid
upload_win
upload win
ftpput_win
ftpput win
ftpremove_win
ftpremove win
ftpmkdir_win
ftpmkdir win
/*
  win->tag_win = win->tag_list = 0;
  win->urlUnderPointer = NULL;
*/
open_text
open text
mailhot_win
mailhot win
edithot_win
edithot win
inserthot_win
inserthot win
history_list
history list
hotlist_list
hotlist list
techsupport_text
techsupport text
mailto_text
mailto text
mailto_form_text
mailto form text
news_fsb_win
news fsb win
mail_fsb_win
mail fsb win
search_win_text
search win text
searchindex_win_label
searchindex win label
searchindex_win_text
searchindex win text
src_search_win
src search win
src_search_win_text
src search win text
cci_win
cci win
cci_win_text
cci win text
cci_accept_toggle
cci accept toggle
cci_off_toggle
cci off toggle
dtmout_text
dtmout text
reloading
source_text
source text
format_optmenu
format optmenu
save_format
save format
eDEFAULT_FONT_CHOICE
edefault font choice
e default_font_choice
font_family
font family
/*win->font_size = mo_regular_fonts;*/
/*win->font_family = 0;*/
mo_last_entry
mo last entry
underlines_snarfed
underlines snarfed
mo_default_underlines
mo default underlines
eDEFAULT_FANCY_SELECTIONS
edefault fancy selections
e default_fancy_selections
mail_format
mail format
record_fnam
record fnam
record_pid
record pid
print_text
print text
print_format
print format
target_anchor
target anchor
/* Create search_start and search_end. */
ElementRef
element ref
src_search_pos
src search pos
ISINDEX
/* We don't know yet. */
keyword_search_possible
keyword search possible
eDELAY_IMAGE_LOADS
edelay image loads
e delay_image_loads
/* Install all the GUI bits & pieces. */
/* setup news default states */
eUSETHREADVIEW
e usethreadview
eSHOWALLGROUPS
e showallgroups
eSHOWREADGROUPS
e showreadgroups
eSHOWALLARTICLES
e showallarticles
eNOTHREADJUMPING
e nothreadjumping
have_focus
have focus
mo_binary_transfer
mo binary transfer
mo_annotate
mo annotate
mo_annotate_edit
mo annotate edit
mo_annotate_delete
mo annotate delete
eENABLE_TABLES
eenable tables
e enable_tables
eIMAGEVIEWINTERNAL
e imageviewinternal
/* take care of session history for rbm */
eSESSION_HISTORY_ON_RBM
esession history on rbm
e session_history_on_rbm
session_menu
session menu
num_session_items
num session items
session_items
session items
eNUMBER_OF_ITEMS_IN_RBM_HISTORY
enumber of items in rbm history
e number_of_items_in_rbm_history
/* Pop the window up. */
/* Register win with internal window list. */
/* Set the font size. */
/* Set the underline state. */
/* Set the fancy selections toggle to the starting value. */
mo_set_fancy_selections_toggle
mo set fancy selections toggle
/****************************************************************************
 * name:    delete_cb (PRIVATE)
 * purpose: Callback for the WM_DELETE_WINDOW protocol.
 * inputs:
 *   - as per XmxCallback
 * returns:
 *   nothing
 * remarks:
 *   By the time we get called here, the window has already been popped
 *   down.  Just call mo_delete_window to clean up.
 ****************************************************************************/
delete_cb
delete cb
/****************************************************************************
 * name:    mo_make_window (PRIVATE)
 * purpose: Make a new window from scratch.
 * inputs:
 *   - Widget      parent: Parent for the new window shell.
 *   - mo_window *parentw: Parent window, if one exists (may be NULL).
 * returns:
 *   The new window (mo_window *).
 * remarks:
 *   The 'parent window' parentw is the window being cloned, or the
 *   window in which the 'new window' command was triggered, etc.
 *   Some GUI properties are inherited from it, if it exists (fonts,
 *   anchor appearance, etc.).
 ****************************************************************************/
mo_make_window
mo make window
parentw
MO_VERSION_STRING
mo version string
XmNtitle
xm ntitle
XmNiconName
xm nicon name
XmNcolormap
xm ncolormap
XtCreatePopupShell
xt create popup shell
topLevelShellWidgetClass
top level shell widget class
Xmx_wargs
xmx wargs
xmx_wargs
Xmx_n
xmx n
xmx_n
XtAddEventHandler
xt add event handler
EventMask
event mask
TRUE
XtEventHandler
xt event handler
_XEditResCheckMessages
 xeditrescheckmessages
_x edit res check messages
/****************************************************************************
 * name:    mo_open_another_window_internal (PRIVATE)
 * purpose: Open a new window from an existing window.
 * inputs:
 *   - mo_window *win: The old window.
 * returns:
 *   The new window (mo_window *).
 * remarks:
 *   This routine handles (optional) autoplace of new windows.
 ****************************************************************************/
mo_open_another_window_internal
mo open another window internal
oldx
oldy
scrx
WidthOfScreen
width of screen
scry
HeightOfScreen
height of screen
y
newwin
XmNx
xm nx
XmNy
xm ny
/* Ideally we open down and over 40 pixels... is this possible? */
/* If not, deal with it... */
/* Bug fix, thanks to Ken Shores <kss1376@pop.draper.com> */
/* the original test did not handle the case where the old window
   * was exactly the same size as the screen.  Also, it used a looping
   * algorithm which would infinite loop under such a case. */
XmNdefaultPosition
xm ndefault position
eAUTO_PLACE_WINDOWS
eauto place windows
e auto_place_windows
geom
XmNgeometry
xm ngeometry
/****************************************************************************
 * name:    mo_open_window
 * purpose: Open a new window to view a given URL.
 * inputs:
 *   - Widget      parent: The parent Widget for the new window's shell.
 *   - char          *url: The URL to view in the new window.
 *   - mo_window *parentw: The (optional) parent window of the new window.
 * returns:
 *   The new window.
 * remarks:
 *
 ****************************************************************************/
mo_open_window
mo open window
/****************************************************************************
 * name:    mo_duplicate_window
 * purpose: Clone a existing window as intelligently as possible.
 * inputs:
 *   - mo_window *win: The existing window.
 * returns:
 *   The new window.
 * remarks:
 *
 ****************************************************************************/
neww
mo_duplicate_window_text
mo duplicate window text
/****************************************************************************
 * name:    mo_open_another_window
 * purpose: Open another window to view a given URL, unless the URL
 *          indicates that it's pointless to do so
 * inputs:
 *   - mo_window      *win: The existing window.
 *   - char           *url: The URL to view in the new window.
 *   - char           *ref: The reference (hyperlink text contents) for this
 *                          URL; can be NULL.
 *   - char *target_anchor: The target anchor to view open opening the
 *                          window, if any.
 * returns:
 *   The new window.
 * remarks:
 *
 ****************************************************************************/
ref
return_stat
return stat
/* Check for reference to telnet.  Never open another window
     if reference to telnet exists; instead, call mo_load_window_text,
     which knows how to manage current window's access to telnet. */
/* Set it here; hope it gets handled in mo_load_window_text_first
     (it probably won't, now. */
/* ------------------------------------------------------------------------ */
gargv
gargc
VMS
MO_SIGHANDLER_RETURNTYPE
mo sighandler returntype
ProcessExternalDirective
process external directive
MO_SIGHANDLER_ARGS
mo sighandler args
blip
mo_dtm_poll_and_read
mo dtm poll and read
mo_register_dtm_blip
mo register dtm blip
/* Set a timer that will poll DTM regularly. */
/****************************************************************************
 * name:    fire_er_up (PRIVATE)
 * purpose: Callback from timer that actually starts up the application,
 *          i.e., opens the first window.
 * inputs:
 *   - as per XmxCallback
 * returns:
 *   Nothing.
 * remarks:
 *   This routine figures out what the home document should be
 *   and then calls mo_open_window().
 ****************************************************************************/
fire_er_up
fire er up
home_opt
home opt
init_document
init document
fname
/* Pick up default or overridden value out of X resources. */
eHOME_DOCUMENT
ehome document
e home_document
/* Value of environment variable WWW_HOME overrides that. */
getenv
SAM
PRERELEASE
/*
   * If this is a pre-release, go to the help-on-version doc for three
   *   start ups. Then, go to the Pre-Release warning page for three
   *   start ups. Then go to their defined page or the NCSA home page.
   */
GetCardCount
get card count
MakeFilename
make filename
MO_GO_NCSA_COUNT
mo go ncsa count
MO_HELP_ON_VERSION_DOCUMENT
mo help on version document
/*
   * If this is not a pre-release, go to the help-on-version doc for three
   *   start ups. Then go to their defined page or the NCSA home page.
   */
/* Value of argv[1], if it exists, sets startup_document.
     (All other command-line flags will have been picked up by
     the X resource mechanism.) */
/* Unless they are bogus options - then they will break... DXP */
/* Check for proper home document URL construction. */
mo_url_canonicalize_local
mo url canonicalize local
/* Check for proper init document URL construction. */
/* SWP -- Done in mo_url_prepend_protcol
  if (startup_document && !strstr (startup_document, ":"))
    startup_document = mo_url_canonicalize_local (startup_document);
*/
/* set the geometry values - dxp */
/* then no -geometry was specified on the command line,
	   so we just use the default values from the resources */
eDEFAULT_WIDTH
edefault width
e default_width
eDEFAULT_HEIGHT
edefault height
e default_height
/* the they DID specify a -geometry, so we use that */
eINITIAL_WINDOW_ICONIC
einitial window iconic
e initial_window_iconic
XmNiconic
xm niconic
/* Check the Comment Card */
do_comment
do comment
/* Don't actually display the cc if we aren't in final release */
CommentCard
comment card
/* set focus policy of HTMLWidget according to preferences */
HTMLSetFocusPolicy
html set focus policy
XmNkeyboardFocusPolicy
xm nkeyboard focus policy
XmPOINTER
xm pointer
/****************************************************************************
 * name:    mo_open_initial_window
 * purpose: This routine is called when we know we want to open the
 *          initial Document View window.
 * inputs:
 *   none
 * returns:
 *   mo_succeed
 * remarks: This routine is simply a stub that sets a timeout that
 *          calls fire_er_up() after 10 milliseconds, which does the
 *          actual work.
 ****************************************************************************/
mo_open_initial_window
mo open initial window
/* Set a timer that will actually cause the window to open. */
/****************************************************************************
 * name:    mo_error_handler (PRIVATE)
 * purpose: Handle X errors.
 * inputs:
 *   - Display       *dsp: The X display.
 *   - XErrorEvent *event: The error event to handle.
 * returns:
 *   0, if it doesn't force an exit.
 * remarks:
 *   The main reason for this handler is to keep the application
 *   from crashing on BadAccess errors during calls to XFreeColors().
 ****************************************************************************/
mo_error_handler
mo error handler
XErrorEvent
x error event
XUngrabPointer
x ungrab pointer
CurrentTime
current time
/* in case error occurred in Grab */
/* BadAlloc errors (on a XCreatePixmap() call)
     and BadAccess errors on XFreeColors are 'ignoreable' errors */
error_code
error code
BadAlloc
bad alloc
BadAccess
bad access
request_code
request code
/* All other errors are 'fatal'. */
XGetErrorText
x get error text
/* Try to close down gracefully. */
/* never makes it here.... */
/****************************************************************************
 * name:    setup_imagekill
 * purpose: Read the imagekill file if it exists and fill in the
 *          imagekill_sites array
 *
 * returns:
 *   nothing
 * remarks:
 *
 ****************************************************************************/
IMAGESELECT_FILENAME
imageselect filename
setup_imagekill
setup imagekill
home_ptr
home ptr
home
passwd
pwdent
imageselect_file_pathname
imageselect file pathname
FILE
fp
num_delay_sites
num delay sites
num_kill_sites
num kill sites
get_home
get home
/* Check to see if the file exists. If it doesn't, then exit */
file_exists
file exists
/* try to open it */
fopen
/* read it */
fgets
rewind
/* 6 == strlen("delay ") */
strncpy
/* 5 == strlen("kill ") */
fclose
/* exported from HTTP.c */
HT_SetExtraHeaders
ht setextraheaders
ht_set extra headers
headers
/****************************************************************************
 * name:    mo_do_gui
 * purpose: This is basically the real main routine of the application.
 * inputs:
 *   - int    argc: Number of arguments.
 *   - char **argv: The argument vector.
 * returns:
 *   nothing
 * remarks:
 *
 ****************************************************************************/
mo_do_gui
mo do gui
argc
argv
MONO_DEFAULT
mono default
use_color
use color
no_defaults
no defaults
color_set
color set
display_name
display name
dpy
XrmDatabase
xrm database
intDB
int db
appDB
app db
intWidget
int widget
/* for prefs - DXP */
successful
prefsStructP
prefs struct p
thePrefsStructP
the prefs struct p
/* Loop through the args before passing them off to
     XtAppInitialize() in case we need to catch something first. */
/* Motif setup. */
XmxStartup
xmx startup
XmNmappedWhenManaged
xm nmapped when managed
/*
     * Awful expensive to open and close the display just to find
     * rhe depth information.
     */
XOpenDisplay
x open display
DisplayPlanes
display planes
DefaultScreen
default screen
XCloseDisplay
x close display
XtAppInitialize
xt app initialize
options
XtNumber
xt number
color_resources
color resources
mono_resources
mono resources
/* initialize the preferences stuff */
preferences_genesis
preferences genesis
/* I should probably be generating an error here... */
signal
SIGBUS
SIGSEGV
SIGILL
abort
get_ptr_to_preferences
get ptr to preferences
/* First for the regular resources */
XtVaGetApplicationResources
xt va get application resources
RdataP
rdata p
resources
/*
  appDB=XrmGetDatabase(dsp);

  if (Rdata.internationalFilename!=NULL) {
	if ((intDB=XrmGetFileDatabase(Rdata.internationalFilename))!=NULL) {
		XrmMergeDatabases(intDB,&appDB);
		XrmSetDatabase(dsp,appDB);
	}
	else {
		fprintf(stderr,"There was no language file called:\n  [%s]\n",Rdata.internationalFilename);
	}
  }

  intWidget=XtVaCreateWidget("international",xmRowColumnWidgetClass,toplevel,
			     NULL);
  XtVaGetApplicationResources(intWidget, (XtPointer)&Idata, intResources,
			      XtNumber (intResources), NULL);
*/
/* read the preferences file now */
read_preferences_file
read preferences file
eINSTALL_COLORMAP
einstall colormap
e install_colormap
bcolr
XCreateColormap
x create colormap
RootWindow
root window
DefaultVisual
default visual
AllocNone
alloc none
XtNbackground
xt nbackground
XQueryColor
x query color
DefaultColormap
default colormap
XAllocColor
x alloc color
XmNbackground
xm nbackground
/* Needed for picread.c, right now. */
XVisualInfo
x visual info
vinfo
vptr
visualid
XVisualIDFromVisual
x visual id from visual
XGetVisualInfo
x get visual info
VisualIDMask
visual id mask
class
XFree
x free
/* First get the hostname. */
gethostname
uname
sysname
release
XSetErrorHandler
x set error handler
/* Transient shell cannot be focussed, so no point in splash screen as it
       will be complete psychadelic */
eSPLASHSCREEN
e splashscreen
splash_goto
splash goto
splashpix
war
sform
spixwid
fontW
font w
fontH
font h
/* GO GO MOSAIC SPLASH SCREEN - WHOOMP! */
XLoadQueryFont
x load query font
descent
xmMenuShellWidgetClass
xm menu shell widget class
LoadSplashXPM
load splash xpm
flags
DoRed
do red
DoGreen
do green
DoBlue
do blue
red
xF9F9
x f9f9
blue
x0404
green
/* we use red so we don't bother freeing it */
WhitePixelOfScreen
white pixel of screen
foreground
GCForeground
gc foreground
XtAppAddActions
xt app add actions
mo_init_menubar
mo init menubar
__sgi
  sgi
/* Turn on debugging malloc if necessary. */
eDEBUGGING_MALLOC
edebugging malloc
e debugging_malloc
mallopt
M_DEBUG
m debug
eACCEPT_LANGUAGE_STR
eaccept language str
e accept_language_str
extras
eXTERM_COMMAND
exterm command
e xterm_command
eUNCOMPRESS_COMMAND
euncompress command
e uncompress_command
eGUNZIP_COMMAND
egunzip command
e gunzip_command
eTWEAK_GOPHER_TYPES
etweak gopher types
e tweak_gopher_types
eMAX_WAIS_RESPONSES
emax wais responses
e max_wais_responses
eFTP_TIMEOUT_VAL
eftp timeout val
e ftp_timeout_val
eFTP_REDIAL
eftp redial
e ftp_redial
eFTP_REDIAL_SLEEP
eftp redial sleep
e ftp_redial_sleep
eFTP_FILENAME_LENGTH
eftp filename length
e ftp_filename_length
eFTP_ELLIPSIS_LENGTH
eftp ellipsis length
e ftp_ellipsis_length
eFTP_ELLIPSIS_MODE
eftp ellipsis mode
e ftp_ellipsis_mode
eSEND_REFERER
esend referer
e send_referer
eSEND_AGENT
esend agent
e send_agent
eHTTPTRACE
e httptrace
eWWW2TRACE
e www2trace
eHTMLWTRACE
e htmlwtrace
eCCITRACE
e ccitrace
eSRCTRACE
e srctrace
eCACHETRACE
e cachetrace
eNUTTRACE
e nuttrace
eUSEAFSKLOG
e useafsklog
ePROXY_SPECFILE
eproxy specfile
e proxy_specfile
ReadNoProxies
read no proxies
eNOPROXY_SPECFILE
enoproxy specfile
e noproxy_specfile
eUSE_DEFAULT_EXTENSION_MAP
euse default extension map
e use_default_extension_map
eGLOBAL_EXTENSION_MAP
eglobal extension map
e global_extension_map
ePERSONAL_EXTENSION_MAP
epersonal extension map
e personal_extension_map
eUSE_DEFAULT_TYPE_MAP
euse default type map
e use_default_type_map
eGLOBAL_TYPE_MAP
eglobal type map
e global_type_map
ePERSONAL_TYPE_MAP
epersonal type map
e personal_type_map
HAVE_HDF
have hdf
eTWIRL_INCREMENT
etwirl increment
e twirl_increment
/* Then make a copy of the hostname for shortmachine.
     Don't even ask. */
/* Then find out the full name, if possible. */
eFULL_HOSTNAME
efull hostname
e full_hostname
eGETHOSTBYNAME_IS_EVIL
egethostbyname is evil
e gethostbyname_is_evil
hostent
phe
gethostbyname
h_name
h name
/* (Otherwise machine just remains whatever gethostname returned.) */
/* Author Name & Email init.  - bjs */
pw
getpwuid
getuid
cc
default_author_name
default author name
eDEFAULT_AUTHOR_NAME
edefault author name
e default_author_name
default_author_email
default author email
eDEFAULT_AUTHOR_EMAIL
edefault author email
e default_author_email
pw_gecos
pw gecos
pw_name
pw name
/* If there's no tmp directory assigned by the X resource, then
     look at TMPDIR. */
tmp_dir
tmp dir
eTMP_DIRECTORY
etmp directory
e tmp_directory
/* It can still be NULL when we leave here -- then we'll just
                   let tmpnam() do what it does best. */
/* If there's no docs directory assigned by the X resource,
     then look at MOSAIC_DOCS_DIRECTORY environment variable
     and then at hardcoded default. */
docs_dir
docs dir
DOCS_DIRECTORY_DEFAULT
docs directory default
eCOLORS_PER_INLINED_IMAGE
ecolors per inlined image
e colors_per_inlined_image
set_pref_int
set pref int
eUSE_GLOBAL_HISTORY
euse global history
e use_global_history
mo_setup_global_history
mo setup global history
mo_init_global_history
mo init global history
mo_setup_default_hotlist
mo setup default hotlist
mo_write_default_hotlist
mo write default hotlist
mo_setup_pan_list
mo setup pan list
eHOTLIST_ON_RBM
ehotlist on rbm
e hotlist_on_rbm
mo_init_hotmenu
mo init hotmenu
/* Write pid into "~/.mosaicpid". */
fnam
// SAM
getpid
XCreateFontCursor
x create font cursor
XC_watch
xc watch
xc_watch
XtRealizeWidget
xt realize widget
/* get the current geometry values */
SIGUSR1
/*Wait 3 secs, then popdown*/
MakePixmaps
make pixmaps
eCCIPORT
e cciport
MoCCIStartListening
mo cci start listening
XtAppMainLoop
xt app main loop
/****************************************************************************
 * name:    mo_process_external_directive
 * purpose: Handle an external directive given to the application via
 *          a config file read in response to a SIGUSR1.
 * inputs:
 *   - char *directive: The directive; either "goto" or "newwin".
 *   - char       *url: The URL corresponding to the directive.
 * returns:
 *   nothing
 * remarks:
 *
 ****************************************************************************/
CLIP_TRAILING_NEWLINE(url)
clip trailing newline(url)
clip_trailing_newline(url)
mo_manufacture_dummy_event
mo manufacture dummy event
foo
/* This is fucking hilarious. */
XAnyEvent
x any event
a
/* HAHA! */
serial
/* HAHA AGAIN! */
send_event
send event
mo_process_external_directive
mo process external directive
directive
/* Process a directive that we received externally. */
/* Make sure we have a window. */
CLIP_TRAILING_NEWLINE
clip trailing newline
/* Force a new window to open. */
mo_flush_image_cache
mo flush image cache
Cardinal
cardinal
num_params
num params
XtIsTopLevelShell
xt is top level shell
xany
EnterNotify
enter notify
LeaveNotify
leave notify
mo_flush_passwd_cache
mo flush passwd cache
HTFTPClearCache
htftp clear cache
HTAAServer_clear
htaaserver clear
htaa server_clear
HTProgress
ht progress
